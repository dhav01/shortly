/* accent color : #f18805 tangerine*/
/*white: FCFCFC*/
/* spanish violet: 46237A */
/*russian violet: 20063B*/

/*As px is fixed unit(Not responsive), we are going to use relative unit (rem)*/
/*1 rem = 1*font size of html element (ie 16px) 
to make calculations easy, we set font size of html as 62.5% which makes 1 rem =10px
*/

/*Typography*/
html {
  margin: 0.5rem;
  font-size: 62.5%;
}

*,
*::after,
*::before {
  box-sizing: border-box;
  /*to make sure elements dont get leaked out of screen*/
}

:root {
  --heading: #20063b; /*planning to use it for heading*/
  --color-primary: #7868e6;
  --color-secondary: #f18805;
  --white: #fcfcfc;
  --font: 'Inter', sans-serif;
  --button-color: #46237a;
  --border-color: #ccc;
}

body {
  font-family: var(--font);
  color: var(--color-primary);
  line-height: 1.5;
  font-size: 2.4rem; /*to set the font size of elements other than heading*/
}

h1,
h2 {
  color: var(--heading);
  margin-bottom: 1rem;
}
p {
  margin-top: 0;
}

h1 {
  font-size: 7rem;
}

h2 {
  font-size: 4rem;
}
h3 {
  font-size: 3rem;
}

/*Desktop version*/
@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }
  h1 {
    font-size: 8rem;
  }
  h3 {
    font-size: 2.4rem;
  }
}

/*Links*/
/*to remove underline from all the anchor tags*/
a {
  text-decoration: none;
}

.link-arrow {
  font-weight: bold;
  font-size: 2rem;
  color: var(--color-secondary);
  text-transform: uppercase;
}
.link-arrow::after {
  content: '-->';
  margin-left: 5px; /*to avoid changing the margin we are using px*/
}

/*to add hover effect to arrow in link*/
.link-arrow:hover::after {
  margin-left: 10px;
  transition: margin 0.4s;
}

@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/*Badges*/
.badge {
  border-radius: 20px;
  padding: 0.5rem 1rem;
  font-weight: 600;
  font-size: 2rem;
  white-space: nowrap;
  color: white;
}
/*here we are going to use BEM model and object oriented CSS */
.badge--primary {
  background: var(--color-primary);
}

.badge--secondry {
  background: var(--color-secondary);
}
.badge--small {
  font-size: 1.6rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/*Lists*/
.list {
  /*to get rid of default bullet points*/
  list-style: none;
  font-weight: 600;
  padding-left: 0;
  /*to remove default padding applied by browsers*/
  color: var(--heading);
}

/*to make inline list but also able to apply margin props*/
.list__inline {
  display: inline-block;
}

.list-tick {
  list-style-image: url(/Assets/tick.svg);
  padding-left: 3rem;
}
/*here we are using inheritance because we only want to apply these props to list item having tick*/
.list-tick .list_item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list-tick .list_item {
    padding: 0;
  }
}

/*Icons*/

.icon {
  width: 40px;
  height: 40px;
}

/*to add circle behind icon*/
.icon_container {
  background: rgb(126, 125, 122);
  width: 64px;
  height: 64px;
  border-radius: 100%;
  /*as span is inline element, we cannot apply width and height prop*/
  /* display: inline; */
  /*we are using inline-flex to center the icon inside this container*/
  /* justify-content: center;
  align-items: center; */
}

/*To add colours to our icon*/
.icon__primary {
  fill: var(--color-primary);
}

/*Buttons*/
button {
  cursor: pointer;
  text-align: center;

  border: 0;
  white-space: nowrap;
}
.btn {
  color: white;
  font-size: 1.8rem;
  font-weight: 400;
  margin: 1rem 0;
  padding: 1.5rem 3rem;
  border-radius: 6px;
  text-align: center;
  text-transform: uppercase;
}

.btn__primary {
  background: var(--button-color);
}

.btn__primary:hover {
  background: #5e24b5;
}

.btn__secondary {
  background: var(--color-secondary);
}

.btn__secondary:hover {
  background: #fc981c;
}

.btn-inline {
  width: 100%;
  display: inline-block;
}

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
    padding: 1rem 2rem;
  }
}

/*Inputs*/
.input {
  padding: 1rem 2rem;
  outline: 0;
  font-size: 2rem;
  border: 1px solid var(--border-color);
  border-radius: 30px;
  color: var(--heading);
  font-weight: 600;
}
/*to change props of placeholder*/
::placeholder {
  color: #cdcbd7;
}

.input_group {
  border: 1px solid var(--border-color);
  border-radius: 30px;
  display: flex;
}

.input_group .input {
  border: none;
  flex-grow: 1;
  padding: 1rem;
}

.input_group .btn {
  margin: 2px;
  border-radius: 30px;
  padding: 1rem 3rem;
}

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/*Cards*/
.container {
  justify-content: center;
  margin-top: 50px;
}

@media screen and (min-width: 1024px) {
  .container {
    display: flex;
  }
}

.card {
  position: relative;
  width: 35rem;
  background: var(--white);
  margin: 10px;
  margin-bottom: 3rem;
  padding: 3rem;
  /* border: 1px solid grey; */
  border-radius: 15px;
  box-shadow: 1px 5px 15px 2px rgba(212, 192, 192, 0.83);
  -webkit-box-shadow: 1px 5px 15px 2px rgba(212, 192, 192, 0.83);
  -moz-box-shadow: 1px 5px 15px 2px rgba(212, 192, 192, 0.83);
}

.card_image {
  position: absolute;
  top: -10%;
}
.card_image .icon {
  fill: gold;
}

.content h3 {
  margin-top: 0;
}

/*Grid layout */
.grid {
  display: grid;
}

/**starting from tablets we want to show col side by side **/

@media screen and (min-width: 768px) {
  .grid--cols-2 {
    grid-template-columns: 1fr 1fr;
  }

  /**just incase you need three col grid **/
  .grid--cols-3 {
    grid-template-columns: repeat(
      3,
      1fr
    ); /*no difference wrt to .grid--cols-2; can write in both ways*/
  }
}
